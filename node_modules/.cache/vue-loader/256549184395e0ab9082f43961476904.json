{"remainingRequest":"F:\\ServerPlatformWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\ServerPlatformWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\ServerPlatformWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\ServerPlatformWeb\\src\\components\\setting\\Setting.vue?vue&type=template&id=04f20311&scoped=true&","dependencies":[{"path":"F:\\ServerPlatformWeb\\src\\components\\setting\\Setting.vue","mtime":1651512164085},{"path":"F:\\ServerPlatformWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651512135878},{"path":"F:\\ServerPlatformWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651512162165},{"path":"F:\\ServerPlatformWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651512135878},{"path":"F:\\ServerPlatformWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":1651512162163}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}